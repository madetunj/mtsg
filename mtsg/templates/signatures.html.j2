<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="generator" content="{{ generator }}" />
    <title>Mutational Signatures</title>
    <script src="https://cdn.plot.ly/plotly-1.57.1.min.js"></script>
    <script>
      const state = {
        name: "",
        data: {
          headers: [],
          samples: [],
        },
      };

      const colors = Plotly.d3.scale.category20();

      const selectFirstDiseaseCode = () => {
        const $option = document.querySelector("#plot option:first-child");
        state.name = $option.value;
      };

      const addEventListeners = () => {
        document.getElementById("plot").addEventListener("change", (event) => {
          state.name = event.target.value;
          render();
        });
      };

      const loadData = () => {
        const payload = document.getElementById("payload").innerText;
        state.data = JSON.parse(payload).data;
      };

      const buildSignatureTraces = (signatures, samples, diseaseCode) => {
        const diseaseTotals = new Array(signatures.length).fill(0);

        for (let sample of samples) {
          if (sample.disease === diseaseCode) {
            for (let i = 0; i < sample.contributions.length; i++) {
              diseaseTotals[i] += sample.contributions[i];
            }
          }
        }

        const total = diseaseTotals.reduce((sum, value) => (sum + value), 0);

        return signatures.map((name, i) => ({
          x: [diseaseTotals[i] / total],
          y: [diseaseCode],
          text: `${diseaseTotals[i]}<br>${name}`,
          hoverinfo: "text",
          orientation: "h",
          type: "bar",
          showlegend: false,
          marker: {
            color: colors(i),
          }
        }));
      };

      const buildSampleTraces = (signatures, samples, diseaseCode) => {
        samples = samples.filter((s) => s.disease === diseaseCode);
        const sampleNames = samples.map(s => s.id);

        const traces = signatures.map((name, i) => {
          return {
            x: samples.map(s => s.contributions[i]),
            y: sampleNames,
            xaxis: "x2",
            yaxis: "y2",
            name,
            text: samples.map((s) => `${s.contributions[i]}<br>${name}`),
            hoverinfo: "text",
            orientation: "h",
            type: "bar",
            marker: {
              color: colors(i),
            }
          }
        });

        const totals = samples.map((_, i) => traces.reduce((sum, trace) => sum + trace.x[i], 0));

        for (let trace of traces) {
          for (let i = 0; i < trace.x.length; i++) {
            trace.x[i] /= totals[i];
          }
        }

        let contributionsTrace = {
          x: totals,
          y: sampleNames,
          xaxis: "x3",
          yaxis: "y3",
          text: sampleNames.map((name, i) => `${totals[i]}<br>${name}`),
          hoverinfo: "text",
          orientation: "h",
          type: "bar",
          showlegend: false,
          marker: {
            color: '#911938',
          }
        };

        traces.push(contributionsTrace);

        return traces;
      };

      const render = () => {
        const { data: { headers: signatures, samples: samples }, name: diseaseCode } = state;

        const signatureTraces = buildSignatureTraces(signatures, samples, diseaseCode);
        const sampleTraces = buildSampleTraces(signatures, samples, diseaseCode);
        const data = [...signatureTraces, ...sampleTraces];

        renderChart(diseaseCode, data);
      };

      const renderChart = (title, data) => {
        const layout = {
          title,
          barmode: "stack",
          hovermode: "closest",
          legend: {
            orientation: "h",
          },
          xaxis: {
            anchor: "y1",
            domain: [0.025, 0.9],
          },
          yaxis: {
            anchor: "x1",
            domain: [0.9, 1.0],
            ticklen: 8,
          },
          xaxis2: {
            anchor: "y2",
            domain: [0.025, 0.9],
            title: "Percent contribution (no. mutations)",
          },
          yaxis2: {
            anchor: "x2",
            domain: [0.0, 0.8],
            ticklen: 8,
          },
          xaxis3: {
            anchor: "y3",
            domain: [0.9, 1.0],
            title: "Total contribution",
          },
          yaxis3: {
            anchor: "x3",
            domain: [0.0, 0.8],
            showticklabels: false,
          }
        };

        const config = {
          responsive: true,
        };

        Plotly.newPlot("chart", data, layout, config);
      };

      document.addEventListener("DOMContentLoaded", () => {
        loadData();
        selectFirstDiseaseCode();
        addEventListeners();
        render();
      });
    </script>
    <script id="payload" type="application/json">
      {{ payload }}
    </script>
    <style>
      body {
        display: grid;
        font-family: Arial, Helvetica, sans-serif;
        grid-template-areas:
          "header"
          "content"
          "footer";
        grid-template-rows: auto 1fr auto;
        height: 100vh;
        margin: 0;
      }

      header {
        background: #efefef;
        display: flex;
        flex-shrink: 0;
        grid-area: header;
        padding: 0.5em 1em;
        justify-content: space-between;
      }

      header h1 {
        font-size: 22px;
        font-weight: 300;
        margin: 0;
        vertical-align: middle;
      }

      #controls {
        display: flex;
        flex-direction: row;
        align-items: center;
      }

      #controls strong {
        padding-right: 0.25em;
      }

      #controls .plots {
        margin-right: 1em;
      }

      #controls select {
        vertical-align: top;
      }

      #chart {
        grid-area: content;
        padding: 1em 1em 0;
      }

      footer {
        display: flex;
        flex-shrink: 0;
        font-size: 0.75em;
        grid-area: footer;
        justify-content: center;
      }

      footer ul {
        padding: 0;
      }

      footer li {
        display: inline-block;
      }

      footer li:before {
        color: #999;
        content: "\2022";
        margin: 0 0.5em 0 0.25em;
      }

      footer li:first-child:before {
        content: "";
      }

      footer li a {
        color: #999;
        text-decoration: none;
      }

      footer li a:hover {
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Mutational Signatures</h1>

      <div id="controls">
        <div class="plots">
          <strong>Plot</strong>
          <select id="plot">
            {% for disease in diseases %}
              <option value="{{disease}}">{{disease}}</option>
            {% endfor %}
          </select>
        </div>
      </div>
    </header>

    <div id="chart"></div>

    <footer>
      <ul>
        <li><a href="https://www.stjude.org/">St. Jude Children's Research Hospital</a></li>
        <li><a href="https://cancer.sanger.ac.uk/cosmic/signatures/">Wellcome Sanger Institute COSMIC Mutational Signatures</a></li>
      </ul>
    </footer>
  </body>
</html>
